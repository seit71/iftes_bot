import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import random
import json
import os
from aiogram.utils.markdown import hbold

TOKEN = "7752950131:AAH_UHAOt26NgdyIdslp8s7Bd-cnIk0BBPo"



TOKEN_FILE = "tokens.json"


def load_tokens():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ JSON.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞: { "user_id": token, ... }.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    if not os.path.exists(TOKEN_FILE):
        return {}  # –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    with open(TOKEN_FILE, "r", encoding="utf-8") as file:
        try:
            tokens = json.load(file)
            # –í —Ñ–∞–π–ª–µ –º—ã —Ö—Ä–∞–Ω–∏–º user_id –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫, –ø–æ—ç—Ç–æ–º—É –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å
            return tokens
        except json.JSONDecodeError:
            return {}  # –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω


def save_tokens(tokens):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª JSON.
    """
    with open(TOKEN_FILE, "w", encoding="utf-8") as file:
        json.dump(tokens, file, ensure_ascii=False, indent=4)


def get_user_token(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å.
    –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.

    user_id (int) -> token (int).
    """
    tokens = load_tokens()

    # –ü—Ä–∏–≤–æ–¥–∏–º user_id –∫ —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ JSON
    str_user_id = str(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    if str_user_id not in tokens:
        new_token = random.randint(1000, 9999)  # –°–ª—É—á–∞–π–Ω–æ–µ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
        tokens[str_user_id] = new_token
        save_tokens(tokens)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω (—Ç—É—Ç —É–∂–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å)
    return tokens[str_user_id]


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üî• –£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")], [KeyboardButton(text="üî• –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –î–û–î")]],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def welcome_user(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –î–Ω—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –ò–§–¢–≠–ë –ù–ò–Ø–£ –ú–ò–§–òüî•.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ò–§–¢–≠–ë –ù–ò–Ø–£ –ú–ò–§–ò –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
        reply_markup=start_keyboard
    )


@dp.message(F.text == "üî• –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –î–û–î")
async def start_action(message: Message):
    await message.answer("–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –ù–ò–Ø–£ –ú–ò–§–ò —Å–æ—Å—Ç–æ–∏—Ç—Å—è 9 —Ñ–µ–≤—Ä–∞–ª—è –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º –æ—Ñ–∏—Å–µ –ù–ò–Ø–£ –ú–ò–§–ò. \n–ù–∞—á–∞–ª–æ –≤ 10:00 \n\n –° —Å–æ–±–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç. ")

keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/iftes_mephi")], [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ]
)


@dp.message(F.text == "üî• –£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
async def participate_in_raffle(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    chat_member = await bot.get_chat_member(chat_id='@iftes_mephi', user_id=user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    if chat_member.status not in ["member", "administrator", "creator"]:
        await message.answer(
            "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π —ç—Ç–æ.",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –≤—ã–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    unique_token = f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {get_user_token(user_id)}"

    await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –í–æ—Ç –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {unique_token}")

@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    chat_member = await bot.get_chat_member(chat_id='@iftes_mephi', user_id=user_id)

    if chat_member.status in ["member", "administrator", "creator"]:
        unique_token = get_user_token(user_id)


        await callback.message.edit_text(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: {unique_token}")
    else:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
